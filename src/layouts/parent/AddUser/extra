import React, { Component } from 'react';
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
// import UserTable from '../usertable/userTable';
import "../AddUser/form.css"
import { db } from "../../../firebase";
import {
    query,
    collection,
    addDoc,
    onSnapshot,
} from "firebase/firestore";

import Box from '@mui/material/Box';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import FormControl from '@mui/material/FormControl';

import "../usertable/userTable.css"
import Parent from '../parent';
class AddUser extends Component {
    constructor(props) {
        super(props)
        this.state = {
            users: [],
            fName: "",
            lName: "",
            address: "",
            city: "",
            country: "",
            pinCode: "",
        }
    }

    onChangeHandler = (e) => {
        this.setState({
            [e.target.name]: e.target.value
        });
    }

    componentDidMount() {
        console.log('---componant did mount----');
        this.getUsers();
    }

    getUsers = async () => {
        console.log('---getUSers----');
        const q = query(collection(db, "users"))
        const unsub =
            onSnapshot(q, (snapshot) => {
                const data1 = snapshot.docs.map((doc) => ({
                    id: doc.id,
                    ...doc.data(),
                }));
                this.setState({ users: data1 })
                console.log(data1)
            })
    }


    onClickAddUser = async (e) => {
        e.preventDefault();
        const { pinCode } = this.state
        const { fName } = this.state
        const { lName } = this.state
        const { address } = this.state
        const { city } = this.state
        const { country } = this.state
        const usersCollectionRef = collection(db, "users");
        await addDoc(usersCollectionRef, { fName: fName, lName: lName, address: address, city: city, country: country, pinCode: pinCode });
        // this.setState({ fName: "", lName: "", address: "", city: "", country: "", pinCode: "" })
        this.props.history.push('/dashboard')
    }

    render() {
        const { users } = this.state
        const { pinCode } = this.state
        const { fName } = this.state
        const { lName } = this.state
        const { address } = this.state
        const { city } = this.state
        const { country } = this.state
        return (
            <div>
                <DashboardLayout>
                    <DashboardNavbar />
                    <form>
                        <div className='wrapper3'>
                            <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>
                                <div>
                                    <p className="wrapper"
                                        style={{
                                            fontSize: 20,
                                            fontWeight: "bold",
                                            userSelect: "none",
                                            fontVariant: "small-caps",
                                        }}>User Entry Form</p>
                                    <div className='wrapper1'>
                                        <FormControl sx={{ m: 1, width: '39ch' }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-fname">First Name</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-fname"
                                                name="fName"
                                                value={fName}
                                                onChange={this.onChangeHandler}
                                                label="First Name"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>

                                        <FormControl sx={{ m: 1, width: '39ch', marginLeft: '13px' }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-lname">Last Name</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-lname"
                                                name="lName"
                                                value={lName}
                                                onChange={this.onChangeHandler}
                                                label="Last Name"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>


                                        <FormControl sx={{ m: 1, width: '80ch' }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-address">Address</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-address"
                                                name="address"
                                                value={address}
                                                onChange={this.onChangeHandler}
                                                label="Address"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>

                                        <FormControl sx={{ m: 1, width: '25.3ch' }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-city">City</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-city"
                                                name="city"
                                                value={city}
                                                onChange={this.onChangeHandler}
                                                label="City"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>

                                        <FormControl sx={{ m: 1, width: '25.3ch', marginLeft: '14px' }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-Country">Country</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-Country"
                                                name="country"
                                                value={country}
                                                onChange={this.onChangeHandler}
                                                label="Country"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>

                                        <FormControl sx={{ m: 1, width: '25.3ch', marginLeft: "14px" }} variant="outlined">
                                            <InputLabel htmlFor="outlined-adornment-pincode">Pin Code</InputLabel>
                                            <OutlinedInput
                                                id="outlined-adornment-pincode"
                                                name="pinCode"
                                                value={pinCode}
                                                onChange={this.onChangeHandler}
                                                label="Pin Code"
                                                aria-describedby="outlined-weight-helper-text"
                                            />
                                        </FormControl>

                                        <button
                                            type="submit"
                                            className='btn1'
                                            onClick={(e) => this.onClickAddUser(e)}
                                        >
                                            ADD
                                        </button>
                                    </div>
                                </div>
                            </Box>
                        </div>
                    </form>
{/* 
                    <div>
                        <div className='wrapper2'>
                            <div className='wrapper'
                                style={{
                                    fontSize: 20,
                                    fontWeight: "bold",
                                    userSelect: "none",
                                    fontVariant: "small-caps",
                                    marginBottom: 8
                                }}
                                >User Table</div>
                            <div className='root1'>
                                <div className='root'>
                                    <table className='table1'>
                                        <thead>
                                            <tr>
                                                <th>FirstName</th>
                                                <th>LastName</th>
                                                <th>Address</th>
                                                <th>city</th>
                                                <th>Country</th>
                                                <th>pin code</th>
                                            </tr>
                                        </thead>

                                        <tbody className='tbody1'>
                                            {users.map(user => {
                                                return (
                                                    <tr key={user.id}>
                                                        <td>
                                                            {user.fName}
                                                        </td>
                                                        <td>{user.lName} </td>
                                                        <td>{user.address}</td>
                                                        <td>{user.city}</td>
                                                        <td>{user.country}</td>
                                                        <td>{user.pinCode}</td>
                                                    </tr>
                                                )
                                            }
                                            )}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div> */}
                    {/* <Parent users= {users} getUsers= {this.getUsers}/> */}
                    {/* <UserTable  data = {data}/> */}

                </DashboardLayout>
            </div >
        )
    }
}

export default AddUser;